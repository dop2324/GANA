package egovframework.dnworks.controller.sitemanager.func.festvl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import egovframework.com.cmm.EgovMessageSource;
import egovframework.com.cmm.service.EgovFileMngService;
import egovframework.com.cmm.service.EgovFileMngUtil;
import egovframework.com.cmm.service.EgovProperties;
import egovframework.com.cmm.service.FileVO;
import egovframework.com.cmm.util.EgovDoubleSubmitHelper;
import egovframework.com.cmm.util.EgovStringUtil;
import egovframework.dnworks.base.WebDefault;
import egovframework.dnworks.cmm.Code;
import egovframework.dnworks.cmm.PageNavi;
import egovframework.dnworks.cmm.util.Util;
import egovframework.dnworks.func.cmm.utl.JavaScriptUtil;
import egovframework.dnworks.func.festvl.service.FestvlInfoService;
import egovframework.dnworks.func.festvl.service.FestvlVO;

@Controller
@RequestMapping("/SiteManager/func/festvl")
public class FestvlMngController extends WebDefault {

	@Resource(name = "egovMessageSource")
    private EgovMessageSource egovMessageSource;
	
	@Autowired
	FestvlInfoService festvlInfoService;
	
	/**
	 * 첨부파일 처리
	 * */
	@Resource(name = "EgovFileMngService")
    private EgovFileMngService fileMngService;
	
	@Resource(name = "EgovFileMngUtil")
    private EgovFileMngUtil fileUtil;
	
	private static final String PROGRAM_PATH = EgovProperties.getProperty("Globals.fileStorePath")+"FESTVL";
	
	/**
	 * 축제정보 메인
	 */
	@RequestMapping("/info.do")
	public String info(HttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap model) throws Exception {
		
		String location 	= null;
		String mnu_code 	= Util.nvl(request.getParameter("mnu_code"));
		int cmd 			= Util.nvl(request.getParameter("cmd"), 1);
		
		HashMap<String, Object> udp = new HashMap<>();
		udp.put("mnu_code"		, "");
		udp.put("srchSe"		, "");
		udp.put("srchUseYn"		, "");
		
		String queryString = super.getParameters(request, udp, true, false);
		model.addAttribute("queryString"	, queryString);
		
		String listLink 	= String.format("?%s", queryString);
		model.addAttribute("listLink"		, listLink);
		model.addAttribute("mnu_code"		, mnu_code);
		
		switch(cmd) {
			case 16:
				this.select(request, session, model, queryString);
				location = managerDir+"/func/festvl/form";
			break;
			case 4:
				this.select(request, session, model, queryString);
				location = managerDir+"/func/festvl/form";
			break;
			default :
				this.list(request, session, model, queryString);
				location = managerDir+"/func/festvl/list";
			break;
		}
		
		return location;
	}

	private void select(HttpServletRequest request, HttpSession session, ModelMap model, String queryString) throws Exception {
		String fsvUnqId		= Util.nvl(request.getParameter("fsvUnqId"));
		int cmd			= !fsvUnqId.equals("") ? Code.Prm.PrmUpd.getCode():Code.Prm.PrmIns.getCode();
		
		FestvlVO resultVO = new FestvlVO();
		if(cmd == Code.Prm.PrmUpd.getCode()) {
			Map<String, Object> param = new HashMap<>();
			param.put("fsvUnqId", fsvUnqId);
			resultVO = this.festvlInfoService.select(param);
			
			// 첨부파일 갯수 구하기
			int atchFileCnt = 0;
			if(!EgovStringUtil.isEmpty(resultVO.getAtchFileId())) {
				FileVO fvo = new FileVO();
				fvo.setAtchFileId(resultVO.getAtchFileId());
				atchFileCnt = (this.fileMngService.selectFileInfs(fvo)).size();
			}
			model.addAttribute("atchFileCnt", atchFileCnt);
		}
		
		model.addAttribute("resultVO"	, resultVO);
		model.addAttribute("cmd"	, cmd);
	}

	private void list(HttpServletRequest request, HttpSession session, ModelMap model, String queryString) throws Exception {
		String srchSe 		= Util.nvl(request.getParameter("srchSe"));
		String srchKwd 	= Util.nvl(request.getParameter("srchKwd"));
		int pageNo 			= Util.nvl(request.getParameter("pageNo"), 1);
		int pageSize 		= Util.nvl(request.getParameter("pageSize"), 20);

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("srchSe"	, srchSe);
		map.put("srchKwd", srchKwd);
		map.put("pageNo"		, pageNo);
		map.put("pageSize"		, pageSize);
		map.put("offset"		, (pageNo - 1) * pageSize);

		int totalCnt = festvlInfoService.selectListCnt(map);
		int no = totalCnt - ((pageNo - 1) * pageSize);
		List<FestvlVO> resultList = festvlInfoService.selectList(map);
		
		model.addAttribute("pageNo"			, pageNo);
		model.addAttribute("no"				, no);
		model.addAttribute("totalCnt"		, totalCnt);
		model.addAttribute("resultList"		, resultList);
		model.addAttribute("srchMap"		, map);
		
		PageNavi pageNavi = new PageNavi();
		model.addAttribute("paging"			, pageNavi.getPageNaviTag(totalCnt, pageSize, pageNo, "", queryString));
	}
	
	@RequestMapping("/process.do")
	public String process(final MultipartHttpServletRequest request, HttpServletResponse response, HttpSession session, ModelMap model
			, @ModelAttribute FestvlVO searchVO) throws Exception {
		
		int cmd 			= Util.nvl(request.getParameter("cmd"), 0);
		String returnUrl	= request.getContextPath()+"/SiteManager/page.do";
		String queryString 	= Util.nvl(request.getParameter("queryString"));
		String location 	= String.format("%s?%s", returnUrl, queryString);
		
		String message 	= "";
		if(EgovDoubleSubmitHelper.checkAndSaveToken(request)) {
			try {
				
				/***
				 * 첨부파일 처리 START
				 * CRUD 로직 전에 처리하여 atchFileId 얻기
				 * ***/
				List<FileVO> result = null;
				String atchFileId = searchVO.getAtchFileId();
				int fileSn = 0;
				if(!EgovStringUtil.isEmpty(atchFileId)) {
					FileVO fvo = new FileVO();
					fvo.setAtchFileId(atchFileId);
					fileSn = fileMngService.getMaxFileSN(fvo);
				}
				
				final Map<String, MultipartFile> files = request.getFileMap();
				if (!files.isEmpty()) {
					result = fileUtil.parseFileInf(files, "FSTV_", fileSn, atchFileId, PROGRAM_PATH);
					for (int i = 0; i < result.size(); i++) {
						String fileCnParam = "atchFileCn_" + (i + 1);
						String fileCn = request.getParameter(fileCnParam);
						if(fileCn != null) {
							result.get(i).setFileCn(fileCn);
						}
					}
					
					if(EgovStringUtil.isEmpty(atchFileId)) {
						// 최초등록
						atchFileId = fileMngService.insertFileInfs(result);
						searchVO.setAtchFileId(atchFileId);
					}else {
						// 수정
						fileMngService.updateFileInfs(result);
					}
					
				}
				/***
				 * 첨부파일 처리 END
				 * ***/
				
				// Insert
				if(cmd == Code.Prm.PrmIns.getCode()) {
					searchVO.setRegId(Util.getSession(session, "USR_ID"));
					this.festvlInfoService.insert(searchVO);
					
					message = egovMessageSource.getMessage("success.common.insert");
					log_what = String.format("%s cmmncd : %s (%s)\n%s"
							, "insert"
							, "축제정보"
							, cmd
							, message
						);
				}
				
				// Update
				if(cmd == Code.Prm.PrmUpd.getCode()) {
					searchVO.setMdfcnId(Util.getSession(session, "USR_ID"));
					this.festvlInfoService.update(searchVO);
					
					message = egovMessageSource.getMessage("success.common.update");
					log_what = String.format("%s cmmncd : %s (%s)\n%s"
							, "update"
							, "축제정보"
							, cmd
							, message
						);
				}
				
				// Delete
				if(cmd == Code.Prm.PrmDel.getCode()) {
					
					// 첨부파일이 있을경우 삭제
					Map<String, Object> param = new HashMap<String, Object>();
					param.put("fsvUnqId", searchVO.getFsvUnqId());
					FestvlVO deleteVO = this.festvlInfoService.select(param);
					if(!EgovStringUtil.isEmpty(deleteVO.getAtchFileId())) {
						FileVO fvo = new FileVO();
						fvo.setAtchFileId(deleteVO.getAtchFileId());
						this.fileMngService.deleteFileMng(fvo);
					}
					
					this.festvlInfoService.delete(searchVO);
					
					message = egovMessageSource.getMessage("success.common.delete");
					log_what = String.format("%s cmmncd : %s (%s)\n%s"
							, "delete"
							, "이용기관관리"
							, cmd
							, message
						);
				}
				
			}catch(Exception e) {
				e.printStackTrace();
				JavaScriptUtil.flushJsAlertAndHistoryBack(response, egovMessageSource.getMessage("fail.request.msg"));
			}
		}
		
		super.insertLog(request, log_what);

		JavaScriptUtil.flushJsAlertAndLocation(response, message, location);
		return null;
	}

}
