package egovframework.dnworks.controller.sitemanager.func.cal;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import egovframework.dnworks.base.WebDefault;
import egovframework.dnworks.cmm.util.Util;
import egovframework.dnworks.cms.cmmncd.service.CmmnCdService;
import egovframework.dnworks.func.cmm.utl.JavaScriptUtil;
import egovframework.dnworks.func.cal.service.CalInfoService;
import egovframework.dnworks.func.cal.service.CalInfoVO;
import egovframework.dnworks.cmm.PageNavi;

@Controller
@RequestMapping("/SiteManager/func/cal")
public class CalController extends WebDefault {

    @Resource(name = "CalInfoService")
    private CalInfoService calInfoService;

    @Autowired
    private CmmnCdService cmmnCdService;

    /**
     * 정산 리스트 뷰
     */
    @RequestMapping("/info.do")
    public String info(HttpServletRequest request, HttpSession session, ModelMap model) throws Exception {
        String mnu_code = Util.nvl(request.getParameter("mnu_code"));
        int cmd = Util.nvl(request.getParameter("cmd"), 1);

        HashMap<String, Object> udp = new HashMap<>();
        udp.put("mnu_code", "");
        udp.put("srchSe", "");
        udp.put("srchUseYn", "");
        udp.put("pageNo", 1);
        udp.put("pageSize", 20);

        String queryString = super.getParameters(request, udp, true, false);
        model.addAttribute("queryString", queryString);
        model.addAttribute("listLink", String.format("?%s", queryString));
        model.addAttribute("mnu_code", mnu_code);

        switch (cmd) {
            default:
                this.list(request, session, model, queryString);
                return managerDir + "/func/cal/list";
        }
    }

    /**
     * 정산 리스트 데이터 바인딩
     */
    public void list(HttpServletRequest request, HttpSession session, ModelMap model, String queryString) throws Exception {
        int pageNo = Util.nvl(request.getParameter("pageNo"), 1);
        int pageSize = Util.nvl(request.getParameter("pageSize"), 20);
        String orgUnqId = this.mngrOrgUnqId(session);

        Map<String, Object> param = new HashMap<>();
        param.put("offset", (pageNo - 1) * pageSize);
        param.put("pageSize", pageSize);
        param.put("pageNo", pageNo);
        param.put("orgUnqId", orgUnqId);

        int totalCnt = 0;
        List<CalInfoVO> calList = null;

        
        totalCnt = calInfoService.selectListCnt(param);
        calList = calInfoService.selectList(param);

        int no = totalCnt - ((pageNo - 1) * pageSize);

        model.addAttribute("pageNo", pageNo);
        model.addAttribute("no", no);
        model.addAttribute("totalCnt", totalCnt);
        model.addAttribute("calList", calList);
        model.addAttribute("srchMap", param);

        PageNavi pageNavi = new PageNavi();
        model.addAttribute("paging", pageNavi.getPageNaviTag(totalCnt, pageSize, pageNo, "", queryString));
    }

    /**
     * 수동 정산 수집 실행 (세션의 기관 ID 기준)
     */
    @RequestMapping("/manualCollect.do")
    public void manualCollect(HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
        String orgUnqId = this.mngrOrgUnqId(session);

        try {
            calInfoService.testTossSettlement(orgUnqId);
            JavaScriptUtil.flushJsAlertAndLocation(response, "정산 수동 수집이 완료되었습니다.", "info.do");
        } catch (Exception e) {
            e.printStackTrace();
            JavaScriptUtil.flushJsAlertAndHistoryBack(response, "정산 수집 중 오류가 발생했습니다.");
        }
    }
}
